CREATE TABLE Cluster(
    ID SERIAL PRIMARY KEY NOT NULL,
    CountRate INTEGER,
    SummaRate INTEGER
);

CREATE TABLE Person(
    ID SERIAL PRIMARY KEY NOT NULL,
    ClusterID INTEGER,
    FOREIGN KEY (ClusterID) REFERENCES Cluster(ID)
);

CREATE TABLE Song(
    ID Serial PRIMARY KEY not null
);

CREATE TABLE RatePerson(
    PersonID INTEGER NOT NULL ,
    SongID INTEGER NOT NULL ,
    Value SMALLINT CHECK (Value >= 0 AND Value <= 5),
    PRIMARY KEY (PersonID, SongID),
    FOREIGN KEY (PersonID) REFERENCES Person(ID),
    FOREIGN KEY (SongID) REFERENCES Song(ID)
);

CREATE TABLE RateCluster(
    ClusterID INTEGER NOT NULL ,
    SongID INTEGER NOT NULL ,
    Value SMALLINT CHECK (Value >= 0 AND Value <=5),
    PRIMARY KEY (ClusterID, SongID),
    FOREIGN KEY (ClusterID) REFERENCES Cluster(ID),
    FOREIGN KEY (SongID) REFERENCES Song(ID)
);

CREATE TABLE PersonPredicate(
    PersonID INTEGER NOT NULL ,
    Value NUMERIC,
    PRIMARY KEY (PersonID),
    FOREIGN KEY (PersonID) REFERENCES Person(ID)
);

CREATE TABLE SongPredicate(
    SongID INTEGER NOT NULL ,
    ClusterID INTEGER NOT NULL ,
    Value NUMERIC,
    PRIMARY KEY (SongID, ClusterID),
    FOREIGN KEY (SongID) REFERENCES Song(ID),
    FOREIGN KEY (ClusterID) REFERENCES Cluster(ID)
);

CREATE TABLE PersonInfo(
    PersonId INTEGER UNIQUE NOT NULL ,
    Name VARCHAR(45) UNIQUE,
    enabled BOOLEAN NOT NULL DEFAULT TRUE,
    Password VARCHAR(45),
    PRIMARY KEY (PersonId),
    FOREIGN KEY (PersonId) REFERENCES Person(ID)
);

CREATE TABLE SongInfo (
    SongId INTEGER UNIQUE NOT NULL ,
    Name VARCHAR(30),
    AuthorSongId INTEGER,
    PRIMARY KEY (SongId),
    FOREIGN KEY (SongId) REFERENCES Song(ID),
    FOREIGN KEY (AuthorSongId) REFERENCES AuthorSong(id)
);

CREATE OR REPLACE FUNCTION OperationPerson() RETURNS TRIGGER as $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO PersonInfo(PersonId, Name) VALUES (NEW.ID, null);
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
    RETURN NEW;
  ELSIF TG_OP = 'DELETE' THEN
    DELETE from PersonInfo where PersonId = OLD.ID;
    RETURN OLD;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER InsertPerson
    AFTER INSERT on Person
    FOR EACH ROW
    EXECUTE PROCEDURE OperationPerson();

CREATE TRIGGER DeletePerson
    BEFORE DELETE on Person
    FOR EACH ROW
    EXECUTE PROCEDURE OperationPerson();

CREATE OR REPLACE FUNCTION OperationSong() RETURNS TRIGGER as $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO SongInfo(SongId, Name) VALUES (NEW.ID, 'empty');
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
    RETURN NEW;
  ELSIF TG_OP = 'DELETE' THEN
    DELETE from SongInfo where SongId = OLD.ID;
    RETURN OLD;
  END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER InsertSong
    AFTER INSERT on Song
    FOR EACH ROW
    EXECUTE PROCEDURE OperationSong();

CREATE TRIGGER DeleteSong
    BEFORE DELETE on Song
    FOR EACH ROW
    EXECUTE PROCEDURE OperationSong();

CREATE TABLE PersonRoles (
  PersonInfoID INTEGER NOT NULL ,
  ROLE VARCHAR(45) NOT NULL,
  PRIMARY KEY (PersonInfoID, ROLE),
  FOREIGN KEY (PersonInfoID) REFERENCES personinfo (PersonId)
);

CREATE TABLE PersonHistory(
  Id SERIAL PRIMARY KEY NOT NULL ,
  PersonId INTEGER NOT NULL,
  SongId INTEGER NOT NULL ,
  Date TIMESTAMP NOT NULL ,
  FOREIGN KEY (PersonId) REFERENCES Person(Id),
  FOREIGN KEY (SongId) REFERENCES Song(Id)
);

CREATE TABLE AuthorSong(
  Id SERIAL PRIMARY KEY NOT NULL ,
  Name VARCHAR(100) not NULL DEFAULT 'empty'
);

CREATE TABLE Genre(
  Id SERIAL PRIMARY KEY NOT NULL ,
  NAME VARCHAR(100) NOT NULL DEFAULT 'empty'
);

CREATE TABLE AuthorSongGenre(
  GenreId INTEGER NOT NULL ,
  AuthorSongId INTEGER NOT NULL ,
  PRIMARY KEY (GenreId, AuthorSongId),
  FOREIGN KEY (GenreId) REFERENCES Genre(id),
  FOREIGN KEY (AuthorSongId) REFERENCES AuthorSong(Id)
);

CREATE TABLE BlackList(
    PersonId INTEGER NOT NULL ,
    SongID INTEGER NOT NULL ,
    PRIMARY KEY (PersonId, SongID),
    FOREIGN KEY (PersonId) REFERENCES Person(ID),
    FOREIGN KEY (SongID) REFERENCES Song(ID)
);




insert into person(id) values(1);
insert into person(id) values(2);

update PersonInfo
set name = 'alisa'
where PersonId = 1;
update PersonInfo
set Password = '123'
where PersonId = 1;

update PersonInfo
set name = 'bob'
where PersonId = 2;
update PersonInfo
set Password = '123'
where PersonId = 2;


insert into personRoles(personinfoid, role) values(1, 'ROLE_USER');
insert into personRoles(personinfoid, role) values(2, 'ROLE_ADMIN');
insert into personRoles(personinfoid, role) values(1, 'ROLE_ADMIN');

INSERT into AuthorSong(id, Name) VALUES (1, 'Lenka');
INSERT INTO AuthorSong (Id, Name) VALUES (2, 'Apocalyptica');
INSERT INTO AuthorSong (Id, Name) VALUES (3, 'Breaking Benjamin');
INSERT INTO AuthorSong (Id, Name) VALUES (4, 'ACDC');
INSERT INTO AuthorSong (Id, Name) VALUES (5, 'Evanesence');
INSERT INTO AuthorSong (Id, Name) VALUES (6, 'Within Temptation');
INSERT INTO AuthorSong (Id, Name) VALUES (7, 'Amy McDonald');

insert into song(id) VALUES (1);
insert into song(id) VALUES (2);
insert into song(id) VALUES (3);
insert into song(id) VALUES (4);
insert into song(id) VALUES (5);
insert into song(id) VALUES (6);
insert into song(id) VALUES (7);
insert into song(id) VALUES (8);
insert into song(id) VALUES (9);
insert into song(id) VALUES (10);
insert into song(id) VALUES (11);
insert into song(id) VALUES (12);
insert into song(id) VALUES (13);

update SongInfo set Name = 'The Show', AuthorSongId = 1 where songid = 1;
update SongInfo set Name = 'Broken Pieces', AuthorSongId = 2 where songid = 2;
update SongInfo set Name = 'Dance With The Devil', AuthorSongId = 3 where songid = 3;
update SongInfo set Name = 'Diary of Jane', AuthorSongId = 3 where songid = 4;
update SongInfo set Name = 'Hi way to hell', AuthorSongId = 4 where songid = 5;
update SongInfo set Name = 'Hope', AuthorSongId = 2 where songid = 6;
update SongInfo set Name = 'My Immortal', AuthorSongId = 5 where songid = 7;
update SongInfo set Name = 'Not Strong Enough', AuthorSongId = 2 where songid = 8;
update SongInfo set Name = 'Our Solemn Hour', AuthorSongId = 6 where songid = 9;
update SongInfo set Name = 'Path', AuthorSongId = 2 where songid = 10;
update SongInfo set Name = 'The Unforgiven', AuthorSongId = 2 where songid = 11;
update SongInfo set Name = 'This is the Life', AuthorSongId = 7 where songid = 12;
update SongInfo set Name = 'Back in back', AuthorSongId = 4 where songid = 13;

INSERT into Genre(id, name) VALUES (1, 'Rock');
INSERT into Genre(id, name) VALUES (2, 'Alternative');

INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (1, 1);
INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (1, 2);
INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (1, 3);
INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (1, 4);
INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (1, 5);
INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (1, 6);
INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (1, 7);

INSERT INTO AuthorSongGenre(GenreId, AuthorSongId) VALUES (2, 3);









insert into Person(Id) values(1);
update PersonInfo
set name = 'alisa@gmail.com'
where PersonId = 1;
update PersonInfo
set password = 123
where PersonId = 1;

insert into PersonRoles(PersonInfoID, ROLE) VALUES (1, 'ROLE_USER');
